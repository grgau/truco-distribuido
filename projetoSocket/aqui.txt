Greg 24/08 Pt.2 {
  Aparentemente corrigi o problema (rodou por 5 partidas sem crashar)
  Tive que usar uma variavel de controle "joguei" porque o primeiro jogador saia jogando tudo que tinha na mão por não ter uma condição dele esperar alguma mensagem
    -> Aquele jeito que tava antes só previa pra caso o jogador 0 fosse o primeiro a jogar sempre (o que não ocorre caso ele não ganhe a rodada - o vira vai ser outro player)

    OBS: Agora falta o resto das estratégias
}

Greg 24/08 {
  Acho que corrigi o problema de jogar mais de uma carta e de jogador não saber a hora dele jogar
    -> Usei uma variavel de controle contJogadas e a funcao findJogada pra dizer pra cada um qual a vez dele
  As vezes ta dando um segfault quando termina a primeira partida e começa a segunda, ainda não sei pq
  To commitando agora meio na pressa, o código ta meio bagunçado, prometo arrumar depois
}

Greg 23/08 {
  Acrescentei na struct o int Potencia, quando reordena as cartas da mão ja atribui a potencia de cada uma
  Rescrevi as funções pegaMaiorCarta, pegaMenorCarta, pegarDoMeio pra usar só getPotencia.
  A função whichCardSend ta sendo chamado em todas as jogadas, então colocar la a estratégia geral
  Criei em card.h a struct "placar", pode servir pra contar placar da rodada ou das partidas (ver linhas 16-20 em client.c)
  Ta atualizando quem ganha cada rodada, não ta marcando ainda quem ganha cada partida (o servidor do aleardo manda uma mensagem tipo "Current score is (19978589-59142455): 1 and (97176476-28583024): 0")
  Dentro da função jogaCarta, coloquei um pedaço que "marca" carta jogada, (suit='-', card=0, potencia=-1)
    -> As funções pegaMaiorCarta, pegaMenorCarta, pegarDoMeio tão funcionando pra tratar cartas "jogadas" (é a condição if(cards[i].card != 0)

  OBS (O que falta fazer que eu lembro agora):
  Ta jogando até a ultima rodada, mas ainda não trata as mensagens "EC", "TRUCO", "DESCE" e "FORA"
    -> Logo não aceita truco, nem pede truco, etc
}

Greg 21/08 {
  Correção do bug que o Azei disse
}

Azei 21/08 {
  Feitas funções para ordenar as cartas na mão de acordo com a potencia/força no jogo. É preciso revisar pra ver se acertei os naipes pfvr.
  Agora, quando for descartar uma carta, apenas fazer um for, copiando as cartas mais à frente para o lugar.
  Por exemplo, usando a "potencia" como abstração:
    10, 5, 3   -> descarto a 5
    10, 3 | 3  -> copiei o 3 pro lugar do 5 e setei o número de cartas na mão pra 2
    10, 3 | 3  -> descarto a 3
    10 | 3, 3  -> copiei a 3 pro lugar da 3 (operação padrão, mesmo sendo redundante neste caso), setei o número de cartas na mão pra 1

  outro exemplo:
    10, 5, 3   -> descarto a 10
    5, 3 | 3   -> copio a 5 pro lugar do 10, o 3 pro lugar do 5 e seto o número de cartas na mão pra 2
    5, 3 | 3   -> descarto a 5
    3 | 3, 3   -> copio a 3 pro lugar da 5 e seto o número de cartas na mão pra 1

  por fim:
    10, 5, 3   -> descarto a 3
    10, 5 |3   -> caso especial, tratado apenas mudando o número de cartas na mão
    ...
    ...

  Além disso, adicionei uns printfs pra fazer debug e entender como as coisas estavam funcionando.
  Obs: Ainda não consegui arrumar o bug de aparecer um caractere a mais em algumas cartas, mas identifiquei que isto ocorre quando uma das cartas é 10.
}

Paim 20/08 {

feito a primeira rodada do truco.
Do jeito que está, todos os jogadores estao jogando suas cartas mais altas, pq eu nao fiz a comparacao de quem esta ganhando.
Quando se recebe a vira, o jogador que tem o idStart faz a jogada.
Em seguida, todos reccebem uma mensagem de OK, e, a partir da mensagem começam a analisar quem eh o vencedor e quando devem jogar.
As variaveis:
  winnerAtMoment controla o ID do vencedor até o momento.
  valorWinnerAtMoment controla o valor da carta q o winnerAtMoment lançou.
  jogadaDaRodada controla em qual jogada está (0,1,2,3) e é possivel controlar quem irá jogar em seguida.

Ao final, todos informam o vencedor da rodada;

Ainda falta:
  Excluir a carta que foi lancada;
  Controlar a dupla q esta vencendo e qual a pontuação;
  reiniciar variaveis para iniciar a 2ª rodada do jogo;
}

Greg 16/08 {
  Adicionei na pasta o código de servidor do Aleardo "myserver.c", precisa de 4 conexões pra começar a funcionar
    -> Eu abro 4 terminais mesmo.
  Função de entrar no jogo "startGame", retorna struct tipo player "myPlayer"
  Função de descobrir quem é parceiro "whoIsMyPartner", retorna struct tipo player "myPartner"
  Função de aceitar conexão de outros jogadores "createPlayersListen" (virando tipo um servidor de outros), recebe port_listening estou ouvindo (valor aleatório)
    -> Relacionado à aquela especificação de << MC, Carta >>
  Criando um socket com cada jogador quando recebe mensagem "MESA" (atuais linhas 50, 51 e 52 de client.c)
    -> Necessário para posteriormente falar qual carta vai ser jogada na mesa
}

Gerv 01/06 {
    Estruturas
        card: estrutura de uma carta
            card->card = número da carta
            card->suit = naipe da carta

        player: estrutura de cada um dos players
            player->ID = id do player no jogo
            player->ip = ip relacionado ao player
            player->port = porta usada para conexão com o player

        subs: estrutura de uma substring (usada para separar a mensagem recebida)
            subs->info = texto em si
            subs->prox = ponteiro para próxima subs da mensagem


    Recebimento de mensagens

    --- createSocket(char *ip,int port);
            ip: ip da conexão
            port: porta da conexão

            retorna socket criado
                ex: sock = createSocket("127.0.0.1",14000);


    --- receiveData(int sock,subs *message);
            sock: socket de quem receberá mensagem
            message: ponteiro para estruturar mensagem

            retorna inicio da mensagem
                ex: message = receiveData(sock,message);


    --- receivePlayers(subs *message,player *players);
            message: primeiro nó da mensagem com informação de players
            players: vetor de players

            não retorna nada
                ex: receivePlayers(message->prox,players);


    --- receiveCards(subs *message,card *cards);
            message: primeiro nó da mensagem com informação de cartas
            cards: vetor de cartas

            não retorna nada
                ex: receiveCard(message->prox,cards);


    --- receiveVira(subs *message,card *vira, char *IDStart);
            message: primeiro nó da mensagem com informação da vira
            vira: carta vira
            IDStart: id do jogador que inicia (virá da mensagem)

            não retorna nada
                ex: receiveVira(message->prox,vira,IDStart);

    Envio de mensagens

    --- sendData(char *comando,card *cards,int index, int sock);
            comando: comando dado (ex: DESCE,MC,EC,TRUCO)
            carta: vetor de cartas (ou NULL se não jogará carta)
            index: indice da carta a ser jogada
            sock: socket para o qual a mensagem irá

            não retorna nada
                ex: sendData("MC",cards,2,dealer);

    Rodar
        gcc -o server server.c
        ./server

        gcc -o client client.c
        ./client
}

ESPECIFICAÇÃO

    Projeto: Partida de truco :::
     
    Cada grupo deve desenvolver um jogador da mesa, usando sockets em C, sem identificação de quem será parceiro de quem (isso será definido pelo servidor, no início de cada partida). Todo jogador terá conhecimento das cartas jogadas pelos demais jogadores, permitindo sua tomada de decisão.
     
    Dado que os processos são inerentemente rápidos, cada jogada deve ser precedida por uma espera de 5 segundos, para que seja possível identificar o que está ocorrendo.
     
    Todo jogador deve mostrar na sua saída padrão (terminal de vídeo) o que está ocorrendo a cada jogada.
     
    Ao final de cada partida (alguma dupla somar 12 pontos), o servidor dará reinício alterando a ordem dos jogadores, assim as duplas eventualmente serão alteradas.
     
    O endereço IP do servidor e dos jogadores deverá ser informado ao começar a primeira partida, sendo o endereço do servidor recebido como parâmetro da linha de comando.
     
    O jogo deve começar com todos os jogadores enviando ao servidor o seu nome, endereço IP e porta para comunicação com demais jogadores, na forma:
       ≪ "ID", endereçoIP, porta ≫

    O servidor fará então o broadcast dessas informações assim que receber os dados dos quatro jogadores, sendo que ele indicará nesse momento a posição de cada jogador na mesa, sendo que id1 será parceiro de id3 e id2 será parceiro de id4. A mensagem terá a forma:
       ≪ "MESA", id1, IP1, porta1, id2, IP2, porta2, id3, IP3, porta3, id4, IP4, porta4 ≫

    Essa mensagem deve ser usada pelos jogadores para identificar com quem devem conversar a cada momento e quem é seu parceiro, para poder contar a pontuação de cada mão de jogo.
     

    A porta de comunicação com o servidor será a 14000. Entre jogadores será definida pela mensagem inicial enviada por cada um deles.
     

    Nas mensagens descritas abaixo, se considera que as em vermelho são originadas pelo servidor, as em azul são originadas por um jogador e enviadas ao servidor e as em preto são trocadas entre os jogadores.
     

    Mensagens possíveis:

        Notifica fim de rodada, com conteúdo dado por
        ≪ "FR", nomeganhador, pontos ≫ servidor para jogadores
        Passa cartas, individualmente para cada jogador, sendo
        ≪ "CARTA", carta1, carta2, carta3 ≫ servidor para jogadores
        Passa o vira e indica primeiro jogador, broadcast para os quatro jogadores, sendo
        ≪ "VIRA", carta, identificador ≫ servidor para jogadores
        Jogada, broadcast para os três jogadores e servidor, sendo:
            Mostra carta, sendo:
            ≪ "MC", carta ≫ jogador para servidor
            Esconde carta, sendo:
            ≪ "EC", NULL ≫ jogador para os demais jogadores
            ≪ "EC", carta ≫ jogador para o servidor
            Truca, sendo:
            ≪ "TRUCO", NULL ≫ jogador para jogadores e servidor
            Aceita o truco, sendo:
            ≪ "DESCE", NULL ≫ jogador para jogadores e servidor
            Desiste do truco, sendo:
            ≪ "FORA", NULL ≫ jogador para jogadores e servidor

    Qualquer que seja a jogada é preciso que o jogador se "desfaça" de uma carta, ou apresentando ela aos demais ou devolvendo ao servidor

    No caso de ocorrer truco, não será possível pedir 6. Só é possível aceitar ou desistir.

    Para que o truco seja aceito é preciso que os dois adversários entrem em acordo, o que significa que devem ser recebidas duas respostas ao truco.

    Todas as mensagens são compostas apenas por strings de caracteres separados por vírgulas (até mesmo o valor de "pontos").

    As cartas serão representadas por uma letra ('O', 'C', 'E' e 'P') seguida de um número, sendo que ás=1, dama=8, valete=9 e rei=10. Assim, por exemplo, o sete de copas seria representado por "C7", já o ás de espadas seria "E1".


    PRAZO PARA ENTREGA: 05/06/2018, até 23h59 por e-mail com o código fonte do jogador.
